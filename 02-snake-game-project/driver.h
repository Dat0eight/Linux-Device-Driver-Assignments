
#ifndef __DRIVER_HEADER
#define __DRIVER_HEADER

#include <linux/kernel.h>
#include <linux/spi/spi.h>
#include <linux/slab.h>
#include <linux/delay.h>
#include <linux/uaccess.h>
#include <linux/cdev.h>
#include <linux/sched/signal.h>
#include <linux/mod_devicetable.h>
#include <linux/module.h>           /* Defines functions such as module_init/module_exit */
#include <linux/gpio.h>             /* Defines functions such as gpio_request/gpio_free */
#include <linux/platform_device.h>  /* For platform devices */
#include <linux/gpio/consumer.h>    /* For GPIO Descriptor */
#include <linux/of.h>               /* For DT */  
#include <linux/miscdevice.h>
#include <linux/fs.h>
#include <linux/init.h>
#include <linux/err.h>
#include <linux/interrupt.h>
#include <linux/device.h>
#include <linux/jiffies.h>
#include <linux/timer.h>
#include <linux/types.h>
#include <linux/build_bug.h>
#include <linux/stddef.h>
#include <linux/random.h>

#define GAME_SPEED      1250         /*milisecs*/

#define LCD_WIDTH			84
#define LCD_HEIGHT			48

#define LCD_FUNCTIONSET	        0x20 //H=0
#define LCD_ADDFUNCTIONSET		0x21 //H=1

#define LCD_SETYADDR		    0x40
#define LCD_SETXADDR		    0x80
#define DISPLAYCONTROL	        0x08

#define LCD_SETBIAS	            0x10
#define LCD_SETVOP		        0x80
#define LCD_SETVOP2             0x37
#define LCD_SETTEMP		        0x04

#define LCD_DISPLAYNORMAL       0x04
#define LCD_DISPLAYINVERTED     0x05

#define GPIOD_CMD_VALUE         0
#define GPIOD_DATA_VALUE        1

#define MAX_LEN_SNAKE       256
#define MESSAGE_MAX_SIZE    13

#define SCREEN_X0_COORDINATE 0             //X coordinate of top left point (font6x8)
#define SCREEN_Y0_COORDINATE 0             //Y coordinate of top left point (font6x8)
#define SCREEN_X1_COORDINATE 13            //X coordinate of bottom right point (font6x8)
#define SCREEN_Y1_COORDINATE 5             //Y coordinate of bottom right point (font6x8)
#define LCD_BUFFER_SIZE 		LCD_WIDTH * LCD_HEIGHT / 8

#define DIRECTION_LEFT  0
#define DIRECTION_RIGHT 1
#define DIRECTION_UP    2
#define DIRECTION_DOWN  3
#define DIRECTION_RESET 4

struct snake_vector{
    int x;
    int y;
};

struct nokia_lcd {
	dev_t dev_num;
    struct timer_list game_speed_timer;
	struct spi_device *spi;
	struct gpio_desc *reset;
	struct gpio_desc *dc;
	struct gpio_desc *led;
	struct cdev *mcdev;
	struct device *mdevice;
    struct snake_vector head;      //start position of the snake              
    struct snake_vector dir;
    struct snake_vector berry;      //start position of the first berry
    uint8_t message[MESSAGE_MAX_SIZE];
};

typedef enum {
	LCD_COMMAND = 0,
	LCD_DATA = !LCD_COMMAND
} lcd_write_type_t;

typedef enum {
	lcd_pixel_clear = 0,
	lcd_pixel_set = !lcd_pixel_clear
} lcd_pixel_t;

struct snake_vector snake[MAX_LEN_SNAKE];
unsigned char LCD_Buffer[LCD_BUFFER_SIZE];
struct gpio_desc *left_btn, *right_btn, *up_btn, *down_btn, *reset_btn;
static int left_btn_irq, right_btn_irq, up_btn_irq, down_btn_irq, reset_btn_irq;
static int count;
static int score = 0;
static int size_starting_snake = 2;
int direction = DIRECTION_RIGHT;    //snake move to the right screen at the starting game

static irqreturn_t left_btn_irq_handler(int irq, void *dev_id);
static irqreturn_t right_btn_irq_handler(int irq, void *dev_id);
static irqreturn_t up_btn_irq_handler(int irq, void *dev_id);
static irqreturn_t down_btn_irq_handler(int irq, void *dev_id);
static irqreturn_t reset_btn_irq_handler(int irq, void *dev_id);

static int game_probe(struct spi_device *spi);
static int game_remove(struct spi_device *spi);

static int lcd_gpiod_get(struct device *dev);
static void btn_direction_input(void);
static void state_of_btn (void);
static int set_btn_irq(void);
static void free_gpiod_btn(void);
static void free_irq_btn(void);

void lcd_init(struct nokia_lcd *lcd);
void lcd_reset(struct nokia_lcd *lcd);
void lcd_clear(struct nokia_lcd *lcd);
void lcd_write_one_byte(struct nokia_lcd *lcd, uint8_t data, uint8_t mode);
void lcd_goto_XY(struct nokia_lcd *lcd, uint8_t X, uint8_t Y);
void lcd_send_string(struct nokia_lcd *lcd, uint8_t *s);
void lcd_send_char(struct nokia_lcd *lcd, uint8_t data);
void lcd_draw_into_XY(struct nokia_lcd *lcd, uint8_t *s, uint8_t X, uint8_t Y);

void game_timer_callback(struct timer_list *data);
static u8 create_random_number(u8 MAX);
void draw_border(int x, int y, int width, int height, struct nokia_lcd *lcd);
bool border_collision(struct snake_vector head_point);
bool snake_collision(struct snake_vector head_point);
void update_snake (struct nokia_lcd *lcd);
void process_input(struct nokia_lcd *lcd);

const uint8_t font6x8[][6] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // space
    { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
    { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
    { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
    { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
    { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
    { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
    { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
    { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
    { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
    { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
    { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
    { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
    { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
    { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
    { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
    { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
    { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
    { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
    { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
    { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
    { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
    { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
    { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
    { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
    { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
    { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
    { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
    { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
    { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
    { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
    { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
    { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
    { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
    { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
    { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
    { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
    { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
    { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
    { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
    { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
    { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
    { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
    { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
    { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
    { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
    { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
    { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
    { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
    { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
    { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
    { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
    { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
    { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
    { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
    { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
    { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
    { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
    { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
    { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
    { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
    { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
    { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
    { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
    { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
    { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
    { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
    { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
    { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
    { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
    { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
    { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
    { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
    { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
    { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
    { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
    { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
    { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
    { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
    { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
    { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    { 0x00,0x00, 0x06, 0x09, 0x09, 0x06 }    // degree
};
#endif